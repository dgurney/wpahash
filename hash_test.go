package main

import "testing"

type hashStruct struct {
	hash         []byte
	expectedHash uint64
}

var validHashes = []hashStruct{
	{[]byte{0x76, 0x8a, 0x06, 0xb6, 0x9f, 0x0c, 0xec, 0x1a, 0x53, 0xe9, 0x93, 0xa7, 0x55, 0x93, 0x55, 0x93, 0x19, 0x9a, 0x20, 0x7b, 0xc0, 0xfd, 0xd5, 0xa4, 0x97, 0xc0, 0x18, 0x6a, 0xce, 0x1d, 0xb3, 0x16, 0x92, 0x07, 0x27, 0x11, 0x88, 0x1d, 0x44, 0x6d, 0xd7, 0x0f, 0xec, 0x06, 0xfa, 0x39, 0x61, 0xf3, 0x63, 0x95, 0x69, 0xc5, 0x14, 0x4a, 0x07, 0x6b, 0x58, 0x43, 0xbb, 0xfc, 0xf2, 0x9e, 0x5c, 0x0a, 0xa1, 0x17, 0xc0, 0xca, 0x3e, 0xec, 0x33, 0xd1, 0xef, 0x2b, 0x8a, 0x2b, 0x68, 0x63, 0xda, 0xa3, 0x32, 0x0c, 0xf6, 0xaa, 0xa0, 0xd7, 0x75, 0x01, 0x02, 0xe9, 0xc3, 0xec, 0xa9, 0x0d, 0x4e, 0x52, 0x4a, 0x6b, 0xb4, 0xd4, 0x4e, 0xc8, 0xb1, 0x26, 0x46, 0x9d, 0x68, 0xbd, 0xe7, 0xf0, 0x11, 0xf7, 0x5b, 0x96, 0x14, 0xb9, 0x36, 0x5e, 0x57, 0x8b, 0x95, 0x09, 0x2b, 0x53, 0x88, 0x8b, 0xb5, 0x14}, 0xa7c77c0e9b1daf92},
	{[]byte{0x6a, 0xc7, 0x12, 0x51, 0x82, 0xae, 0xfa, 0xa7, 0x09, 0xb0, 0x11, 0x09, 0xb4, 0x63, 0xa6, 0xdc, 0x9a, 0x22, 0xa1, 0xba, 0x68, 0xe4, 0x17, 0xce, 0xc9, 0xc5, 0x5a, 0x40, 0x16, 0x60, 0xdf, 0x64, 0x70, 0x35, 0xdc, 0x5a, 0x6c, 0x96, 0xb5, 0xda, 0xb6, 0xa2, 0x03, 0x64, 0x83, 0xd2, 0x41, 0x79, 0x18, 0xde, 0xf5, 0x00, 0x80, 0x3d, 0xef, 0xb8, 0xed, 0xef, 0xd8, 0xe7, 0xe2, 0x81, 0xe6, 0xbe, 0x4f, 0x83, 0x9b, 0xac, 0x6a, 0xef, 0xd6, 0x9f, 0x0b, 0xc9, 0x15, 0xd4, 0x20, 0x67, 0xbd, 0x12, 0xb9, 0xe3, 0xf9, 0xec, 0xf8, 0x01, 0x0c, 0x6c, 0x01, 0xbb, 0xff, 0x03, 0x70, 0xd3, 0xc9, 0x17, 0x72, 0xb8, 0x96, 0x17, 0x57, 0x5f, 0xf6, 0x54, 0x61, 0x46, 0x61, 0x03, 0x48, 0x5a, 0xb4, 0x11, 0x3a, 0x07, 0xd6, 0xad, 0x2a, 0xb6, 0x99, 0x3b, 0x8b, 0x04, 0x31, 0xec, 0x8d, 0x55, 0x61, 0xd7}, 0x932d4cdfdced1344},
	{[]byte{0x13, 0x4b, 0x45, 0x04, 0x22, 0x98, 0x46, 0x4f, 0x47, 0x3b, 0xec, 0xa3, 0x4f, 0x24, 0x28, 0x40, 0x03, 0x80, 0xed, 0xa0, 0x60, 0x06, 0x73, 0x47, 0xbf, 0x3b, 0xb2, 0xae, 0x9d, 0xe4, 0x34, 0x02, 0x0e, 0x80, 0x60, 0x94, 0x32, 0x7c, 0x5e, 0x8f, 0xfd, 0x9c, 0x34, 0xa3, 0xb3, 0xd2, 0xb2, 0x9d, 0xc5, 0xc2, 0xa5, 0x43, 0x80, 0xf4, 0x06, 0xaa, 0xc9, 0xbe, 0xad, 0x24, 0x23, 0x63, 0x65, 0xbc, 0x61, 0xdf, 0x94, 0xbe, 0x0d, 0x12, 0x15, 0x59, 0xfc, 0x1d, 0x14, 0x84, 0x3e, 0xe4, 0x79, 0x51, 0x32, 0x80, 0x5c, 0x01, 0x16, 0x69, 0xb7, 0x5d, 0x2f, 0xe9, 0x98, 0x2b, 0x6e, 0x7a, 0x16, 0x47, 0xfb, 0xe8, 0x9c, 0x7a, 0xd1, 0x1e, 0xc0, 0xad, 0x72, 0xf0, 0xfe, 0x44, 0x0d, 0xea, 0x56, 0x67, 0x30, 0x48, 0x1b, 0x51, 0xa6, 0x77, 0x10, 0x19, 0x4a, 0x52, 0x34, 0x43, 0xf8, 0x25, 0x96, 0x61}, 0x9a4b5d5e444ab9af},
	{[]byte{0x95, 0x74, 0xb6, 0xbb, 0x17, 0x8c, 0x69, 0x9c, 0x59, 0xe3, 0xaf, 0x70, 0x09, 0x91, 0xac, 0xe8, 0x21, 0x66, 0x90, 0x8f, 0x8e, 0x71, 0x38, 0x7a, 0xb6, 0x4c, 0xf3, 0xe4, 0x19, 0x34, 0x47, 0xe6, 0x03, 0x37, 0x2e, 0x1e, 0xa5, 0x84, 0x74, 0xb8, 0x4a, 0xcc, 0xa8, 0x05, 0x75, 0x8b, 0x8d, 0x99, 0x44, 0xd3, 0xd7, 0x81, 0x57, 0x6f, 0x2b, 0x68, 0xdf, 0x95, 0x14, 0xb7, 0x98, 0x40, 0x7c, 0xd4, 0x64, 0xf5, 0xd1, 0xb6, 0xa7, 0x5b, 0xd1, 0xd7, 0x09, 0xbf, 0xd2, 0x5d, 0x0b, 0xb7, 0xe8, 0x92, 0xf7, 0x34, 0x6c, 0xe3, 0xa8, 0x0d, 0xb9, 0xbd, 0x00, 0xdb, 0x89, 0xce, 0xa5, 0xf0, 0x5e, 0x36, 0xf6, 0xa3, 0xaf, 0xc4, 0xca, 0xd7, 0xd8, 0x39, 0x6e, 0xe3, 0xb5, 0x3d, 0x40, 0x72, 0x85, 0x29, 0xb5, 0x82, 0x3d, 0x42, 0xc5, 0xbf, 0x87, 0x67, 0x3f, 0x54, 0xc8, 0xde, 0xb7, 0x46, 0xf9, 0x55}, 0x3b842823f34c59f2},
	{[]byte{0x35, 0xf8, 0xc9, 0x7a, 0xb6, 0x64, 0xf0, 0xb1, 0x8c, 0xc0, 0x16, 0xe8, 0xfa, 0xb2, 0x13, 0xc4, 0x3e, 0xd6, 0xf2, 0xa1, 0x7e, 0x87, 0xc1, 0x32, 0xc6, 0x51, 0xd5, 0x91, 0x12, 0x97, 0x82, 0x84, 0x9f, 0xde, 0x3b, 0x56, 0x13, 0x60, 0xf7, 0xfd, 0xd2, 0xa1, 0xc8, 0x33, 0x4f, 0x6d, 0x7d, 0x2d, 0xc3, 0x4a, 0x30, 0x98, 0xf8, 0x92, 0xb5, 0x1b, 0x71, 0xf2, 0x2b, 0x47, 0xc5, 0x7b, 0x21, 0xd6, 0xa2, 0x7a, 0xd3, 0x56, 0x08, 0x38, 0x68, 0xde, 0x53, 0xb3, 0xaa, 0xd5, 0xef, 0xbc, 0x70, 0x1b, 0xde, 0x8e, 0x7e, 0x98, 0xf1, 0x21, 0x91, 0x00, 0x3a, 0x0f, 0x54, 0x14, 0x25, 0x45, 0xce, 0x9c, 0x05, 0x3e, 0x35, 0x8b, 0x1a, 0x67, 0xf1, 0x56, 0x2d, 0xfc, 0x0f, 0x62, 0x1f, 0x1e, 0x4f, 0x7d, 0x1f, 0x98, 0xde, 0x76, 0xbd, 0xf2, 0x61, 0x3d, 0x93, 0x7f, 0xeb, 0xf5, 0xb1, 0xed, 0xf8, 0x52}, 0xc0e1af437cb0d038},
}

func TestHashCalculation(t *testing.T) {
	for _, ht := range validHashes {
		h, err := calculateEulaHash("blah", ht.hash, false)
		if err != nil {
			t.Errorf("Unexpected error: %s", err)
		}
		switch {
		case h != ht.expectedHash:
			t.Errorf("Hash %x is not equal to %x! (Registry data: % x)", h, ht.expectedHash, ht.hash)
		default:
			t.Logf("Got expected hash %x for % x", h, ht.hash)
		}
	}
}
